// =============================================================================
// TEGA: TypeScript Embedded GameBoy Macro Assembler
//
// This file is autogenerated - do not edit by hand.
// Instead edit ops-generator.ts and run "npm run generate"
// =============================================================================

import {
  FFPageOffset,
  I8Imm,
  OpDescription,
  SPOffset,
  SymbolOr,
  U16Imm,
  U16Ptr,
  U8Imm
} from "./types";

const isSymbolRef = (x: string) => [
  "symbolicLabel",
  "sizeOfReference",
  "relativeToReference",
].includes(x);

export function NOP(): OpDescription {
  if (arguments.length === 0) return { type: 'opDescription', opcode: 0x00, isPrefix: false };
  throw new Error('NOP: Invalid argument combination provided');
}

export function LD(r16a: 'BC', u16: SymbolOr<U16Imm>): OpDescription;
export function LD(r16a: 'DE', u16: SymbolOr<U16Imm>): OpDescription;
export function LD(r16a: 'HL', u16: SymbolOr<U16Imm>): OpDescription;
export function LD(r16a: 'SP', u16: SymbolOr<U16Imm>): OpDescription;
export function LD(r16ptra: '(BC)', r8b: 'A'): OpDescription;
export function LD(r16ptra: '(DE)', r8b: 'A'): OpDescription;
export function LD(r16ptra: '(HL+)', r8b: 'A'): OpDescription;
export function LD(r16ptra: '(HL-)', r8b: 'A'): OpDescription;
export function LD(r16ptra: '(HL)', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function LD(r8a: 'B', u8: SymbolOr<U8Imm>): OpDescription;
export function LD(r8a: 'C', u8: SymbolOr<U8Imm>): OpDescription;
export function LD(r8a: 'D', u8: SymbolOr<U8Imm>): OpDescription;
export function LD(r8a: 'E', u8: SymbolOr<U8Imm>): OpDescription;
export function LD(r8a: 'H', u8: SymbolOr<U8Imm>): OpDescription;
export function LD(r8a: 'L', u8: SymbolOr<U8Imm>): OpDescription;
export function LD(r8a: 'A', u8: SymbolOr<U8Imm>): OpDescription;
export function LD(u16ptr: SymbolOr<U16Ptr>, r16b: 'SP'): OpDescription;
export function LD(r8a: 'A', r16ptrb: '(BC)' | '(DE)' | '(HL+)' | '(HL-)' | '(HL)'): OpDescription;
export function LD(r8a: 'B', r16ptrb: '(HL)'): OpDescription;
export function LD(r8a: 'C', r16ptrb: '(HL)'): OpDescription;
export function LD(r8a: 'D', r16ptrb: '(HL)'): OpDescription;
export function LD(r8a: 'E', r16ptrb: '(HL)'): OpDescription;
export function LD(r8a: 'H', r16ptrb: '(HL)'): OpDescription;
export function LD(r8a: 'L', r16ptrb: '(HL)'): OpDescription;
export function LD(r16ptra: '(HL)', u8: SymbolOr<U8Imm>): OpDescription;
export function LD(r8a: 'B', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function LD(r8a: 'C', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function LD(r8a: 'D', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function LD(r8a: 'E', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function LD(r8a: 'H', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function LD(r8a: 'L', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function LD(r8a: 'A', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function LD(ffPageOffset: SymbolOr<FFPageOffset>, r8b: 'A'): OpDescription;
export function LD(ffPageC: '(FF00+C)', r8b: 'A'): OpDescription;
export function LD(u16ptr: SymbolOr<U16Ptr>, r8b: 'A'): OpDescription;
export function LD(r8a: 'A', ffPageOffset: SymbolOr<FFPageOffset>): OpDescription;
export function LD(r8a: 'A', ffPageC: '(FF00+C)'): OpDescription;
export function LD(r16a: 'HL', spOffset: SymbolOr<SPOffset>): OpDescription;
export function LD(r16a: 'SP', r16b: 'HL'): OpDescription;
export function LD(r8a: 'A', u16ptr: SymbolOr<U16Ptr>): OpDescription;
export function LD(a0: any, a1: any): OpDescription {
  if (arguments.length === 2) {
    if (a0 === 'BC' && (a1.type === 'u16imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0x01, u16: a1, isPrefix: false };
    }
    if (a0 === 'DE' && (a1.type === 'u16imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0x11, u16: a1, isPrefix: false };
    }
    if (a0 === 'HL' && (a1.type === 'u16imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0x21, u16: a1, isPrefix: false };
    }
    if (a0 === 'SP' && (a1.type === 'u16imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0x31, u16: a1, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === '(BC)') {
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x02, isPrefix: false };
    }
    if (a0 === '(DE)') {
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x12, isPrefix: false };
    }
    if (a0 === '(HL+)') {
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x22, isPrefix: false };
    }
    if (a0 === '(HL-)') {
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x32, isPrefix: false };
    }
    if (a0 === '(HL)') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x70, isPrefix: false };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x71, isPrefix: false };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x72, isPrefix: false };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x73, isPrefix: false };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x74, isPrefix: false };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x75, isPrefix: false };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x77, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'B' && (a1.type === 'u8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0x06, u8: a1, isPrefix: false };
    }
    if (a0 === 'C' && (a1.type === 'u8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0x0e, u8: a1, isPrefix: false };
    }
    if (a0 === 'D' && (a1.type === 'u8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0x16, u8: a1, isPrefix: false };
    }
    if (a0 === 'E' && (a1.type === 'u8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0x1e, u8: a1, isPrefix: false };
    }
    if (a0 === 'H' && (a1.type === 'u8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0x26, u8: a1, isPrefix: false };
    }
    if (a0 === 'L' && (a1.type === 'u8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0x2e, u8: a1, isPrefix: false };
    }
    if (a0 === 'A' && (a1.type === 'u8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0x3e, u8: a1, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if ((a0.type === 'u16ptr' || isSymbolRef(a0.type)) && a1 === 'SP') {
      return { type: 'opDescription', opcode: 0x08, u16ptr: a0, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A') {
      if (a1 === '(BC)') return { type: 'opDescription', opcode: 0x0a, isPrefix: false };
      if (a1 === '(DE)') return { type: 'opDescription', opcode: 0x1a, isPrefix: false };
      if (a1 === '(HL+)') return { type: 'opDescription', opcode: 0x2a, isPrefix: false };
      if (a1 === '(HL-)') return { type: 'opDescription', opcode: 0x3a, isPrefix: false };
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x7e, isPrefix: false };
    }
    if (a0 === 'B') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x46, isPrefix: false };
    }
    if (a0 === 'C') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x4e, isPrefix: false };
    }
    if (a0 === 'D') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x56, isPrefix: false };
    }
    if (a0 === 'E') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x5e, isPrefix: false };
    }
    if (a0 === 'H') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x66, isPrefix: false };
    }
    if (a0 === 'L') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x6e, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === '(HL)' && (a1.type === 'u8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0x36, u8: a1, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'B') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x40, isPrefix: false };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x41, isPrefix: false };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x42, isPrefix: false };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x43, isPrefix: false };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x44, isPrefix: false };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x45, isPrefix: false };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x47, isPrefix: false };
    }
    if (a0 === 'C') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x48, isPrefix: false };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x49, isPrefix: false };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x4a, isPrefix: false };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x4b, isPrefix: false };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x4c, isPrefix: false };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x4d, isPrefix: false };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x4f, isPrefix: false };
    }
    if (a0 === 'D') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x50, isPrefix: false };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x51, isPrefix: false };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x52, isPrefix: false };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x53, isPrefix: false };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x54, isPrefix: false };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x55, isPrefix: false };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x57, isPrefix: false };
    }
    if (a0 === 'E') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x58, isPrefix: false };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x59, isPrefix: false };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x5a, isPrefix: false };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x5b, isPrefix: false };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x5c, isPrefix: false };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x5d, isPrefix: false };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x5f, isPrefix: false };
    }
    if (a0 === 'H') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x60, isPrefix: false };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x61, isPrefix: false };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x62, isPrefix: false };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x63, isPrefix: false };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x64, isPrefix: false };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x65, isPrefix: false };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x67, isPrefix: false };
    }
    if (a0 === 'L') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x68, isPrefix: false };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x69, isPrefix: false };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x6a, isPrefix: false };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x6b, isPrefix: false };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x6c, isPrefix: false };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x6d, isPrefix: false };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x6f, isPrefix: false };
    }
    if (a0 === 'A') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x78, isPrefix: false };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x79, isPrefix: false };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x7a, isPrefix: false };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x7b, isPrefix: false };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x7c, isPrefix: false };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x7d, isPrefix: false };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x7f, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if ((a0.type === 'ffPageOffset' || isSymbolRef(a0.type)) && a1 === 'A') {
      return { type: 'opDescription', opcode: 0xe0, ffPageOffset: a0, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === '(FF00+C)') {
      if (a1 === 'A') return { type: 'opDescription', opcode: 0xe2, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if ((a0.type === 'u16ptr' || isSymbolRef(a0.type)) && a1 === 'A') {
      return { type: 'opDescription', opcode: 0xea, u16ptr: a0, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A' && (a1.type === 'ffPageOffset' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xf0, ffPageOffset: a1, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A') {
      if (a1 === '(FF00+C)') return { type: 'opDescription', opcode: 0xf2, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'HL' && (a1.type === 'spOffset' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xf8, spOffset: a1, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'SP') {
      if (a1 === 'HL') return { type: 'opDescription', opcode: 0xf9, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A' && (a1.type === 'u16ptr' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xfa, u16ptr: a1, isPrefix: false };
    }
  }
  throw new Error('LD: Invalid argument combination provided');
}

export function INC(r16a: 'BC'): OpDescription;
export function INC(r16a: 'DE'): OpDescription;
export function INC(r16a: 'HL'): OpDescription;
export function INC(r16a: 'SP'): OpDescription;
export function INC(r8a: 'B'): OpDescription;
export function INC(r8a: 'C'): OpDescription;
export function INC(r8a: 'D'): OpDescription;
export function INC(r8a: 'E'): OpDescription;
export function INC(r8a: 'H'): OpDescription;
export function INC(r8a: 'L'): OpDescription;
export function INC(r8a: 'A'): OpDescription;
export function INC(r16ptra: '(HL)'): OpDescription;
export function INC(a0: any, a1?: any): OpDescription {
  if (arguments.length === 1) {
    if (a0 === 'BC') return { type: 'opDescription', opcode: 0x03, isPrefix: false };
    if (a0 === 'DE') return { type: 'opDescription', opcode: 0x13, isPrefix: false };
    if (a0 === 'HL') return { type: 'opDescription', opcode: 0x23, isPrefix: false };
    if (a0 === 'SP') return { type: 'opDescription', opcode: 0x33, isPrefix: false };
  }
  if (arguments.length === 1) {
    if (a0 === 'B') return { type: 'opDescription', opcode: 0x04, isPrefix: false };
    if (a0 === 'C') return { type: 'opDescription', opcode: 0x0c, isPrefix: false };
    if (a0 === 'D') return { type: 'opDescription', opcode: 0x14, isPrefix: false };
    if (a0 === 'E') return { type: 'opDescription', opcode: 0x1c, isPrefix: false };
    if (a0 === 'H') return { type: 'opDescription', opcode: 0x24, isPrefix: false };
    if (a0 === 'L') return { type: 'opDescription', opcode: 0x2c, isPrefix: false };
    if (a0 === 'A') return { type: 'opDescription', opcode: 0x3c, isPrefix: false };
  }
  if (arguments.length === 1) {
    if (a0 === '(HL)') return { type: 'opDescription', opcode: 0x34, isPrefix: false };
  }
  throw new Error('INC: Invalid argument combination provided');
}

export function DEC(r8a: 'B'): OpDescription;
export function DEC(r8a: 'C'): OpDescription;
export function DEC(r8a: 'D'): OpDescription;
export function DEC(r8a: 'E'): OpDescription;
export function DEC(r8a: 'H'): OpDescription;
export function DEC(r8a: 'L'): OpDescription;
export function DEC(r8a: 'A'): OpDescription;
export function DEC(r16a: 'BC'): OpDescription;
export function DEC(r16a: 'DE'): OpDescription;
export function DEC(r16a: 'HL'): OpDescription;
export function DEC(r16a: 'SP'): OpDescription;
export function DEC(r16ptra: '(HL)'): OpDescription;
export function DEC(a0: any, a1?: any): OpDescription {
  if (arguments.length === 1) {
    if (a0 === 'B') return { type: 'opDescription', opcode: 0x05, isPrefix: false };
    if (a0 === 'C') return { type: 'opDescription', opcode: 0x0d, isPrefix: false };
    if (a0 === 'D') return { type: 'opDescription', opcode: 0x15, isPrefix: false };
    if (a0 === 'E') return { type: 'opDescription', opcode: 0x1d, isPrefix: false };
    if (a0 === 'H') return { type: 'opDescription', opcode: 0x25, isPrefix: false };
    if (a0 === 'L') return { type: 'opDescription', opcode: 0x2d, isPrefix: false };
    if (a0 === 'A') return { type: 'opDescription', opcode: 0x3d, isPrefix: false };
  }
  if (arguments.length === 1) {
    if (a0 === 'BC') return { type: 'opDescription', opcode: 0x0b, isPrefix: false };
    if (a0 === 'DE') return { type: 'opDescription', opcode: 0x1b, isPrefix: false };
    if (a0 === 'HL') return { type: 'opDescription', opcode: 0x2b, isPrefix: false };
    if (a0 === 'SP') return { type: 'opDescription', opcode: 0x3b, isPrefix: false };
  }
  if (arguments.length === 1) {
    if (a0 === '(HL)') return { type: 'opDescription', opcode: 0x35, isPrefix: false };
  }
  throw new Error('DEC: Invalid argument combination provided');
}

export function RLCA(): OpDescription {
  if (arguments.length === 0) return { type: 'opDescription', opcode: 0x07, isPrefix: false };
  throw new Error('RLCA: Invalid argument combination provided');
}

export function ADD(r16a: 'HL', r16b: 'BC' | 'DE' | 'HL' | 'SP'): OpDescription;
export function ADD(r8a: 'A', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function ADD(r8a: 'A', r16ptrb: '(HL)'): OpDescription;
export function ADD(r8a: 'A', u8: SymbolOr<U8Imm>): OpDescription;
export function ADD(r16a: 'SP', i8: SymbolOr<I8Imm>): OpDescription;
export function ADD(a0: any, a1: any): OpDescription {
  if (arguments.length === 2) {
    if (a0 === 'HL') {
      if (a1 === 'BC') return { type: 'opDescription', opcode: 0x09, isPrefix: false };
      if (a1 === 'DE') return { type: 'opDescription', opcode: 0x19, isPrefix: false };
      if (a1 === 'HL') return { type: 'opDescription', opcode: 0x29, isPrefix: false };
      if (a1 === 'SP') return { type: 'opDescription', opcode: 0x39, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x80, isPrefix: false };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x81, isPrefix: false };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x82, isPrefix: false };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x83, isPrefix: false };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x84, isPrefix: false };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x85, isPrefix: false };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x87, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x86, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A' && (a1.type === 'u8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xc6, u8: a1, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'SP' && (a1.type === 'i8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xe8, i8: a1, isPrefix: false };
    }
  }
  throw new Error('ADD: Invalid argument combination provided');
}

export function RRCA(): OpDescription {
  if (arguments.length === 0) return { type: 'opDescription', opcode: 0x0f, isPrefix: false };
  throw new Error('RRCA: Invalid argument combination provided');
}

export function STOP(): OpDescription {
  if (arguments.length === 0) return { type: 'opDescription', opcode: 0x10, isPrefix: false };
  throw new Error('STOP: Invalid argument combination provided');
}

export function RLA(): OpDescription {
  if (arguments.length === 0) return { type: 'opDescription', opcode: 0x17, isPrefix: false };
  throw new Error('RLA: Invalid argument combination provided');
}

export function JR(i8: SymbolOr<I8Imm>): OpDescription;
export function JR(flag: 'NZ', i8: SymbolOr<I8Imm>): OpDescription;
export function JR(flag: 'Z', i8: SymbolOr<I8Imm>): OpDescription;
export function JR(flag: 'NC', i8: SymbolOr<I8Imm>): OpDescription;
export function JR(flag: 'C', i8: SymbolOr<I8Imm>): OpDescription;
export function JR(a0: any, a1?: any): OpDescription {
  if (arguments.length === 1) {
    if (a0.type === 'i8imm' || isSymbolRef(a0.type)) {
      return { type: 'opDescription', opcode: 0x18, i8: a0, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'NZ' && (a1.type === 'i8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0x20, i8: a1, isPrefix: false };
    }
    if (a0 === 'Z' && (a1.type === 'i8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0x28, i8: a1, isPrefix: false };
    }
    if (a0 === 'NC' && (a1.type === 'i8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0x30, i8: a1, isPrefix: false };
    }
    if (a0 === 'C' && (a1.type === 'i8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0x38, i8: a1, isPrefix: false };
    }
  }
  throw new Error('JR: Invalid argument combination provided');
}

export function RRA(): OpDescription {
  if (arguments.length === 0) return { type: 'opDescription', opcode: 0x1f, isPrefix: false };
  throw new Error('RRA: Invalid argument combination provided');
}

export function DAA(): OpDescription {
  if (arguments.length === 0) return { type: 'opDescription', opcode: 0x27, isPrefix: false };
  throw new Error('DAA: Invalid argument combination provided');
}

export function CPL(): OpDescription {
  if (arguments.length === 0) return { type: 'opDescription', opcode: 0x2f, isPrefix: false };
  throw new Error('CPL: Invalid argument combination provided');
}

export function SCF(): OpDescription {
  if (arguments.length === 0) return { type: 'opDescription', opcode: 0x37, isPrefix: false };
  throw new Error('SCF: Invalid argument combination provided');
}

export function CCF(): OpDescription {
  if (arguments.length === 0) return { type: 'opDescription', opcode: 0x3f, isPrefix: false };
  throw new Error('CCF: Invalid argument combination provided');
}

export function HALT(): OpDescription {
  if (arguments.length === 0) return { type: 'opDescription', opcode: 0x76, isPrefix: false };
  throw new Error('HALT: Invalid argument combination provided');
}

export function ADC(r8a: 'A', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function ADC(r8a: 'A', r16ptrb: '(HL)'): OpDescription;
export function ADC(r8a: 'A', u8: SymbolOr<U8Imm>): OpDescription;
export function ADC(a0: any, a1: any): OpDescription {
  if (arguments.length === 2) {
    if (a0 === 'A') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x88, isPrefix: false };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x89, isPrefix: false };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x8a, isPrefix: false };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x8b, isPrefix: false };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x8c, isPrefix: false };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x8d, isPrefix: false };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x8f, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x8e, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A' && (a1.type === 'u8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xce, u8: a1, isPrefix: false };
    }
  }
  throw new Error('ADC: Invalid argument combination provided');
}

export function SUB(r8a: 'A', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function SUB(r8a: 'A', r16ptrb: '(HL)'): OpDescription;
export function SUB(r8a: 'A', u8: SymbolOr<U8Imm>): OpDescription;
export function SUB(a0: any, a1: any): OpDescription {
  if (arguments.length === 2) {
    if (a0 === 'A') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x90, isPrefix: false };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x91, isPrefix: false };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x92, isPrefix: false };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x93, isPrefix: false };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x94, isPrefix: false };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x95, isPrefix: false };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x97, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x96, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A' && (a1.type === 'u8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xd6, u8: a1, isPrefix: false };
    }
  }
  throw new Error('SUB: Invalid argument combination provided');
}

export function SBC(r8a: 'A', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function SBC(r8a: 'A', r16ptrb: '(HL)'): OpDescription;
export function SBC(r8a: 'A', u8: SymbolOr<U8Imm>): OpDescription;
export function SBC(a0: any, a1: any): OpDescription {
  if (arguments.length === 2) {
    if (a0 === 'A') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x98, isPrefix: false };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x99, isPrefix: false };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x9a, isPrefix: false };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x9b, isPrefix: false };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x9c, isPrefix: false };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x9d, isPrefix: false };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x9f, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x9e, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A' && (a1.type === 'u8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xde, u8: a1, isPrefix: false };
    }
  }
  throw new Error('SBC: Invalid argument combination provided');
}

export function AND(r8a: 'A', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function AND(r8a: 'A', r16ptrb: '(HL)'): OpDescription;
export function AND(r8a: 'A', u8: SymbolOr<U8Imm>): OpDescription;
export function AND(a0: any, a1: any): OpDescription {
  if (arguments.length === 2) {
    if (a0 === 'A') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0xa0, isPrefix: false };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0xa1, isPrefix: false };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0xa2, isPrefix: false };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0xa3, isPrefix: false };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0xa4, isPrefix: false };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0xa5, isPrefix: false };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0xa7, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0xa6, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A' && (a1.type === 'u8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xe6, u8: a1, isPrefix: false };
    }
  }
  throw new Error('AND: Invalid argument combination provided');
}

export function XOR(r8a: 'A', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function XOR(r8a: 'A', r16ptrb: '(HL)'): OpDescription;
export function XOR(r8a: 'A', u8: SymbolOr<U8Imm>): OpDescription;
export function XOR(a0: any, a1: any): OpDescription {
  if (arguments.length === 2) {
    if (a0 === 'A') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0xa8, isPrefix: false };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0xa9, isPrefix: false };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0xaa, isPrefix: false };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0xab, isPrefix: false };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0xac, isPrefix: false };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0xad, isPrefix: false };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0xaf, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0xae, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A' && (a1.type === 'u8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xee, u8: a1, isPrefix: false };
    }
  }
  throw new Error('XOR: Invalid argument combination provided');
}

export function OR(r8a: 'A', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function OR(r8a: 'A', r16ptrb: '(HL)'): OpDescription;
export function OR(r8a: 'A', u8: SymbolOr<U8Imm>): OpDescription;
export function OR(a0: any, a1: any): OpDescription {
  if (arguments.length === 2) {
    if (a0 === 'A') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0xb0, isPrefix: false };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0xb1, isPrefix: false };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0xb2, isPrefix: false };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0xb3, isPrefix: false };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0xb4, isPrefix: false };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0xb5, isPrefix: false };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0xb7, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0xb6, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A' && (a1.type === 'u8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xf6, u8: a1, isPrefix: false };
    }
  }
  throw new Error('OR: Invalid argument combination provided');
}

export function CP(r8a: 'A', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function CP(r8a: 'A', r16ptrb: '(HL)'): OpDescription;
export function CP(r8a: 'A', u8: SymbolOr<U8Imm>): OpDescription;
export function CP(a0: any, a1: any): OpDescription {
  if (arguments.length === 2) {
    if (a0 === 'A') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0xb8, isPrefix: false };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0xb9, isPrefix: false };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0xba, isPrefix: false };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0xbb, isPrefix: false };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0xbc, isPrefix: false };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0xbd, isPrefix: false };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0xbf, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0xbe, isPrefix: false };
    }
  }
  if (arguments.length === 2) {
    if (a0 === 'A' && (a1.type === 'u8imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xfe, u8: a1, isPrefix: false };
    }
  }
  throw new Error('CP: Invalid argument combination provided');
}

export function RET(flag: 'NZ'): OpDescription;
export function RET(flag: 'Z'): OpDescription;
export function RET(flag: 'NC'): OpDescription;
export function RET(flag: 'C'): OpDescription;
export function RET(): OpDescription;
export function RET(a0?: any, a1?: any): OpDescription {
  if (arguments.length === 1) {
    if (a0 === 'NZ') return { type: 'opDescription', opcode: 0xc0, isPrefix: false };
    if (a0 === 'Z') return { type: 'opDescription', opcode: 0xc8, isPrefix: false };
    if (a0 === 'NC') return { type: 'opDescription', opcode: 0xd0, isPrefix: false };
    if (a0 === 'C') return { type: 'opDescription', opcode: 0xd8, isPrefix: false };
  }
  if (arguments.length === 0) return { type: 'opDescription', opcode: 0xc9, isPrefix: false };
  throw new Error('RET: Invalid argument combination provided');
}

export function POP(r16a: 'BC'): OpDescription;
export function POP(r16a: 'DE'): OpDescription;
export function POP(r16a: 'HL'): OpDescription;
export function POP(r16a: 'AF'): OpDescription;
export function POP(a0: any, a1?: any): OpDescription {
  if (arguments.length === 1) {
    if (a0 === 'BC') return { type: 'opDescription', opcode: 0xc1, isPrefix: false };
    if (a0 === 'DE') return { type: 'opDescription', opcode: 0xd1, isPrefix: false };
    if (a0 === 'HL') return { type: 'opDescription', opcode: 0xe1, isPrefix: false };
    if (a0 === 'AF') return { type: 'opDescription', opcode: 0xf1, isPrefix: false };
  }
  throw new Error('POP: Invalid argument combination provided');
}

export function JP(flag: 'NZ', u16: SymbolOr<U16Imm>): OpDescription;
export function JP(flag: 'Z', u16: SymbolOr<U16Imm>): OpDescription;
export function JP(flag: 'NC', u16: SymbolOr<U16Imm>): OpDescription;
export function JP(flag: 'C', u16: SymbolOr<U16Imm>): OpDescription;
export function JP(u16: SymbolOr<U16Imm>): OpDescription;
export function JP(r16a: 'HL'): OpDescription;
export function JP(a0: any, a1?: any): OpDescription {
  if (arguments.length === 2) {
    if (a0 === 'NZ' && (a1.type === 'u16imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xc2, u16: a1, isPrefix: false };
    }
    if (a0 === 'Z' && (a1.type === 'u16imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xca, u16: a1, isPrefix: false };
    }
    if (a0 === 'NC' && (a1.type === 'u16imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xd2, u16: a1, isPrefix: false };
    }
    if (a0 === 'C' && (a1.type === 'u16imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xda, u16: a1, isPrefix: false };
    }
  }
  if (arguments.length === 1) {
    if (a0.type === 'u16imm' || isSymbolRef(a0.type)) {
      return { type: 'opDescription', opcode: 0xc3, u16: a0, isPrefix: false };
    }
  }
  if (arguments.length === 1) {
    if (a0 === 'HL') return { type: 'opDescription', opcode: 0xe9, isPrefix: false };
  }
  throw new Error('JP: Invalid argument combination provided');
}

export function CALL(flag: 'NZ', u16: SymbolOr<U16Imm>): OpDescription;
export function CALL(flag: 'Z', u16: SymbolOr<U16Imm>): OpDescription;
export function CALL(flag: 'NC', u16: SymbolOr<U16Imm>): OpDescription;
export function CALL(flag: 'C', u16: SymbolOr<U16Imm>): OpDescription;
export function CALL(u16: SymbolOr<U16Imm>): OpDescription;
export function CALL(a0: any, a1?: any): OpDescription {
  if (arguments.length === 2) {
    if (a0 === 'NZ' && (a1.type === 'u16imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xc4, u16: a1, isPrefix: false };
    }
    if (a0 === 'Z' && (a1.type === 'u16imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xcc, u16: a1, isPrefix: false };
    }
    if (a0 === 'NC' && (a1.type === 'u16imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xd4, u16: a1, isPrefix: false };
    }
    if (a0 === 'C' && (a1.type === 'u16imm' || isSymbolRef(a1.type))) {
      return { type: 'opDescription', opcode: 0xdc, u16: a1, isPrefix: false };
    }
  }
  if (arguments.length === 1) {
    if (a0.type === 'u16imm' || isSymbolRef(a0.type)) {
      return { type: 'opDescription', opcode: 0xcd, u16: a0, isPrefix: false };
    }
  }
  throw new Error('CALL: Invalid argument combination provided');
}

export function PUSH(r16a: 'BC'): OpDescription;
export function PUSH(r16a: 'DE'): OpDescription;
export function PUSH(r16a: 'HL'): OpDescription;
export function PUSH(r16a: 'AF'): OpDescription;
export function PUSH(a0: any, a1?: any): OpDescription {
  if (arguments.length === 1) {
    if (a0 === 'BC') return { type: 'opDescription', opcode: 0xc5, isPrefix: false };
    if (a0 === 'DE') return { type: 'opDescription', opcode: 0xd5, isPrefix: false };
    if (a0 === 'HL') return { type: 'opDescription', opcode: 0xe5, isPrefix: false };
    if (a0 === 'AF') return { type: 'opDescription', opcode: 0xf5, isPrefix: false };
  }
  throw new Error('PUSH: Invalid argument combination provided');
}

export function RST(offset: '00h'): OpDescription;
export function RST(offset: '08h'): OpDescription;
export function RST(offset: '10h'): OpDescription;
export function RST(offset: '18h'): OpDescription;
export function RST(offset: '20h'): OpDescription;
export function RST(offset: '28h'): OpDescription;
export function RST(offset: '30h'): OpDescription;
export function RST(offset: '38h'): OpDescription;
export function RST(a0: any, a1?: any): OpDescription {
  if (arguments.length === 1) {
    if (a0 === '00h') return { type: 'opDescription', opcode: 0xc7, isPrefix: false };
    if (a0 === '08h') return { type: 'opDescription', opcode: 0xcf, isPrefix: false };
    if (a0 === '10h') return { type: 'opDescription', opcode: 0xd7, isPrefix: false };
    if (a0 === '18h') return { type: 'opDescription', opcode: 0xdf, isPrefix: false };
    if (a0 === '20h') return { type: 'opDescription', opcode: 0xe7, isPrefix: false };
    if (a0 === '28h') return { type: 'opDescription', opcode: 0xef, isPrefix: false };
    if (a0 === '30h') return { type: 'opDescription', opcode: 0xf7, isPrefix: false };
    if (a0 === '38h') return { type: 'opDescription', opcode: 0xff, isPrefix: false };
  }
  throw new Error('RST: Invalid argument combination provided');
}

export function RETI(): OpDescription {
  if (arguments.length === 0) return { type: 'opDescription', opcode: 0xd9, isPrefix: false };
  throw new Error('RETI: Invalid argument combination provided');
}

export function DI(): OpDescription {
  if (arguments.length === 0) return { type: 'opDescription', opcode: 0xf3, isPrefix: false };
  throw new Error('DI: Invalid argument combination provided');
}

export function EI(): OpDescription {
  if (arguments.length === 0) return { type: 'opDescription', opcode: 0xfb, isPrefix: false };
  throw new Error('EI: Invalid argument combination provided');
}
export function RLC(r8a: 'B'): OpDescription;
export function RLC(r8a: 'C'): OpDescription;
export function RLC(r8a: 'D'): OpDescription;
export function RLC(r8a: 'E'): OpDescription;
export function RLC(r8a: 'H'): OpDescription;
export function RLC(r8a: 'L'): OpDescription;
export function RLC(r8a: 'A'): OpDescription;
export function RLC(r16ptra: '(HL)'): OpDescription;
export function RLC(a0: any, a1?: any): OpDescription {
  if (arguments.length === 1) {
    if (a0 === 'B') return { type: 'opDescription', opcode: 0x00, isPrefix: true };
    if (a0 === 'C') return { type: 'opDescription', opcode: 0x01, isPrefix: true };
    if (a0 === 'D') return { type: 'opDescription', opcode: 0x02, isPrefix: true };
    if (a0 === 'E') return { type: 'opDescription', opcode: 0x03, isPrefix: true };
    if (a0 === 'H') return { type: 'opDescription', opcode: 0x04, isPrefix: true };
    if (a0 === 'L') return { type: 'opDescription', opcode: 0x05, isPrefix: true };
    if (a0 === 'A') return { type: 'opDescription', opcode: 0x07, isPrefix: true };
  }
  if (arguments.length === 1) {
    if (a0 === '(HL)') return { type: 'opDescription', opcode: 0x06, isPrefix: true };
  }
  throw new Error('RLC: Invalid argument combination provided');
}

export function RRC(r8a: 'B'): OpDescription;
export function RRC(r8a: 'C'): OpDescription;
export function RRC(r8a: 'D'): OpDescription;
export function RRC(r8a: 'E'): OpDescription;
export function RRC(r8a: 'H'): OpDescription;
export function RRC(r8a: 'L'): OpDescription;
export function RRC(r8a: 'A'): OpDescription;
export function RRC(r16ptra: '(HL)'): OpDescription;
export function RRC(a0: any, a1?: any): OpDescription {
  if (arguments.length === 1) {
    if (a0 === 'B') return { type: 'opDescription', opcode: 0x08, isPrefix: true };
    if (a0 === 'C') return { type: 'opDescription', opcode: 0x09, isPrefix: true };
    if (a0 === 'D') return { type: 'opDescription', opcode: 0x0a, isPrefix: true };
    if (a0 === 'E') return { type: 'opDescription', opcode: 0x0b, isPrefix: true };
    if (a0 === 'H') return { type: 'opDescription', opcode: 0x0c, isPrefix: true };
    if (a0 === 'L') return { type: 'opDescription', opcode: 0x0d, isPrefix: true };
    if (a0 === 'A') return { type: 'opDescription', opcode: 0x0f, isPrefix: true };
  }
  if (arguments.length === 1) {
    if (a0 === '(HL)') return { type: 'opDescription', opcode: 0x0e, isPrefix: true };
  }
  throw new Error('RRC: Invalid argument combination provided');
}

export function RL(r8a: 'B'): OpDescription;
export function RL(r8a: 'C'): OpDescription;
export function RL(r8a: 'D'): OpDescription;
export function RL(r8a: 'E'): OpDescription;
export function RL(r8a: 'H'): OpDescription;
export function RL(r8a: 'L'): OpDescription;
export function RL(r8a: 'A'): OpDescription;
export function RL(r16ptra: '(HL)'): OpDescription;
export function RL(a0: any, a1?: any): OpDescription {
  if (arguments.length === 1) {
    if (a0 === 'B') return { type: 'opDescription', opcode: 0x10, isPrefix: true };
    if (a0 === 'C') return { type: 'opDescription', opcode: 0x11, isPrefix: true };
    if (a0 === 'D') return { type: 'opDescription', opcode: 0x12, isPrefix: true };
    if (a0 === 'E') return { type: 'opDescription', opcode: 0x13, isPrefix: true };
    if (a0 === 'H') return { type: 'opDescription', opcode: 0x14, isPrefix: true };
    if (a0 === 'L') return { type: 'opDescription', opcode: 0x15, isPrefix: true };
    if (a0 === 'A') return { type: 'opDescription', opcode: 0x17, isPrefix: true };
  }
  if (arguments.length === 1) {
    if (a0 === '(HL)') return { type: 'opDescription', opcode: 0x16, isPrefix: true };
  }
  throw new Error('RL: Invalid argument combination provided');
}

export function RR(r8a: 'B'): OpDescription;
export function RR(r8a: 'C'): OpDescription;
export function RR(r8a: 'D'): OpDescription;
export function RR(r8a: 'E'): OpDescription;
export function RR(r8a: 'H'): OpDescription;
export function RR(r8a: 'L'): OpDescription;
export function RR(r8a: 'A'): OpDescription;
export function RR(r16ptra: '(HL)'): OpDescription;
export function RR(a0: any, a1?: any): OpDescription {
  if (arguments.length === 1) {
    if (a0 === 'B') return { type: 'opDescription', opcode: 0x18, isPrefix: true };
    if (a0 === 'C') return { type: 'opDescription', opcode: 0x19, isPrefix: true };
    if (a0 === 'D') return { type: 'opDescription', opcode: 0x1a, isPrefix: true };
    if (a0 === 'E') return { type: 'opDescription', opcode: 0x1b, isPrefix: true };
    if (a0 === 'H') return { type: 'opDescription', opcode: 0x1c, isPrefix: true };
    if (a0 === 'L') return { type: 'opDescription', opcode: 0x1d, isPrefix: true };
    if (a0 === 'A') return { type: 'opDescription', opcode: 0x1f, isPrefix: true };
  }
  if (arguments.length === 1) {
    if (a0 === '(HL)') return { type: 'opDescription', opcode: 0x1e, isPrefix: true };
  }
  throw new Error('RR: Invalid argument combination provided');
}

export function SLA(r8a: 'B'): OpDescription;
export function SLA(r8a: 'C'): OpDescription;
export function SLA(r8a: 'D'): OpDescription;
export function SLA(r8a: 'E'): OpDescription;
export function SLA(r8a: 'H'): OpDescription;
export function SLA(r8a: 'L'): OpDescription;
export function SLA(r8a: 'A'): OpDescription;
export function SLA(r16ptra: '(HL)'): OpDescription;
export function SLA(a0: any, a1?: any): OpDescription {
  if (arguments.length === 1) {
    if (a0 === 'B') return { type: 'opDescription', opcode: 0x20, isPrefix: true };
    if (a0 === 'C') return { type: 'opDescription', opcode: 0x21, isPrefix: true };
    if (a0 === 'D') return { type: 'opDescription', opcode: 0x22, isPrefix: true };
    if (a0 === 'E') return { type: 'opDescription', opcode: 0x23, isPrefix: true };
    if (a0 === 'H') return { type: 'opDescription', opcode: 0x24, isPrefix: true };
    if (a0 === 'L') return { type: 'opDescription', opcode: 0x25, isPrefix: true };
    if (a0 === 'A') return { type: 'opDescription', opcode: 0x27, isPrefix: true };
  }
  if (arguments.length === 1) {
    if (a0 === '(HL)') return { type: 'opDescription', opcode: 0x26, isPrefix: true };
  }
  throw new Error('SLA: Invalid argument combination provided');
}

export function SRA(r8a: 'B'): OpDescription;
export function SRA(r8a: 'C'): OpDescription;
export function SRA(r8a: 'D'): OpDescription;
export function SRA(r8a: 'E'): OpDescription;
export function SRA(r8a: 'H'): OpDescription;
export function SRA(r8a: 'L'): OpDescription;
export function SRA(r8a: 'A'): OpDescription;
export function SRA(r16ptra: '(HL)'): OpDescription;
export function SRA(a0: any, a1?: any): OpDescription {
  if (arguments.length === 1) {
    if (a0 === 'B') return { type: 'opDescription', opcode: 0x28, isPrefix: true };
    if (a0 === 'C') return { type: 'opDescription', opcode: 0x29, isPrefix: true };
    if (a0 === 'D') return { type: 'opDescription', opcode: 0x2a, isPrefix: true };
    if (a0 === 'E') return { type: 'opDescription', opcode: 0x2b, isPrefix: true };
    if (a0 === 'H') return { type: 'opDescription', opcode: 0x2c, isPrefix: true };
    if (a0 === 'L') return { type: 'opDescription', opcode: 0x2d, isPrefix: true };
    if (a0 === 'A') return { type: 'opDescription', opcode: 0x2f, isPrefix: true };
  }
  if (arguments.length === 1) {
    if (a0 === '(HL)') return { type: 'opDescription', opcode: 0x2e, isPrefix: true };
  }
  throw new Error('SRA: Invalid argument combination provided');
}

export function SWAP(r8a: 'B'): OpDescription;
export function SWAP(r8a: 'C'): OpDescription;
export function SWAP(r8a: 'D'): OpDescription;
export function SWAP(r8a: 'E'): OpDescription;
export function SWAP(r8a: 'H'): OpDescription;
export function SWAP(r8a: 'L'): OpDescription;
export function SWAP(r8a: 'A'): OpDescription;
export function SWAP(r16ptra: '(HL)'): OpDescription;
export function SWAP(a0: any, a1?: any): OpDescription {
  if (arguments.length === 1) {
    if (a0 === 'B') return { type: 'opDescription', opcode: 0x30, isPrefix: true };
    if (a0 === 'C') return { type: 'opDescription', opcode: 0x31, isPrefix: true };
    if (a0 === 'D') return { type: 'opDescription', opcode: 0x32, isPrefix: true };
    if (a0 === 'E') return { type: 'opDescription', opcode: 0x33, isPrefix: true };
    if (a0 === 'H') return { type: 'opDescription', opcode: 0x34, isPrefix: true };
    if (a0 === 'L') return { type: 'opDescription', opcode: 0x35, isPrefix: true };
    if (a0 === 'A') return { type: 'opDescription', opcode: 0x37, isPrefix: true };
  }
  if (arguments.length === 1) {
    if (a0 === '(HL)') return { type: 'opDescription', opcode: 0x36, isPrefix: true };
  }
  throw new Error('SWAP: Invalid argument combination provided');
}

export function SRL(r8a: 'B'): OpDescription;
export function SRL(r8a: 'C'): OpDescription;
export function SRL(r8a: 'D'): OpDescription;
export function SRL(r8a: 'E'): OpDescription;
export function SRL(r8a: 'H'): OpDescription;
export function SRL(r8a: 'L'): OpDescription;
export function SRL(r8a: 'A'): OpDescription;
export function SRL(r16ptra: '(HL)'): OpDescription;
export function SRL(a0: any, a1?: any): OpDescription {
  if (arguments.length === 1) {
    if (a0 === 'B') return { type: 'opDescription', opcode: 0x38, isPrefix: true };
    if (a0 === 'C') return { type: 'opDescription', opcode: 0x39, isPrefix: true };
    if (a0 === 'D') return { type: 'opDescription', opcode: 0x3a, isPrefix: true };
    if (a0 === 'E') return { type: 'opDescription', opcode: 0x3b, isPrefix: true };
    if (a0 === 'H') return { type: 'opDescription', opcode: 0x3c, isPrefix: true };
    if (a0 === 'L') return { type: 'opDescription', opcode: 0x3d, isPrefix: true };
    if (a0 === 'A') return { type: 'opDescription', opcode: 0x3f, isPrefix: true };
  }
  if (arguments.length === 1) {
    if (a0 === '(HL)') return { type: 'opDescription', opcode: 0x3e, isPrefix: true };
  }
  throw new Error('SRL: Invalid argument combination provided');
}

export function BIT(bitIndex: '0', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function BIT(bitIndex: '1', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function BIT(bitIndex: '2', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function BIT(bitIndex: '3', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function BIT(bitIndex: '4', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function BIT(bitIndex: '5', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function BIT(bitIndex: '6', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function BIT(bitIndex: '7', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function BIT(bitIndex: '0', r16ptrb: '(HL)'): OpDescription;
export function BIT(bitIndex: '1', r16ptrb: '(HL)'): OpDescription;
export function BIT(bitIndex: '2', r16ptrb: '(HL)'): OpDescription;
export function BIT(bitIndex: '3', r16ptrb: '(HL)'): OpDescription;
export function BIT(bitIndex: '4', r16ptrb: '(HL)'): OpDescription;
export function BIT(bitIndex: '5', r16ptrb: '(HL)'): OpDescription;
export function BIT(bitIndex: '6', r16ptrb: '(HL)'): OpDescription;
export function BIT(bitIndex: '7', r16ptrb: '(HL)'): OpDescription;
export function BIT(a0: any, a1: any): OpDescription {
  if (arguments.length === 2) {
    if (a0 === '0') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x40, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x41, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x42, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x43, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x44, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x45, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x47, isPrefix: true };
    }
    if (a0 === '1') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x48, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x49, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x4a, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x4b, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x4c, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x4d, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x4f, isPrefix: true };
    }
    if (a0 === '2') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x50, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x51, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x52, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x53, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x54, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x55, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x57, isPrefix: true };
    }
    if (a0 === '3') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x58, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x59, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x5a, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x5b, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x5c, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x5d, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x5f, isPrefix: true };
    }
    if (a0 === '4') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x60, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x61, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x62, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x63, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x64, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x65, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x67, isPrefix: true };
    }
    if (a0 === '5') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x68, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x69, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x6a, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x6b, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x6c, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x6d, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x6f, isPrefix: true };
    }
    if (a0 === '6') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x70, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x71, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x72, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x73, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x74, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x75, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x77, isPrefix: true };
    }
    if (a0 === '7') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x78, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x79, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x7a, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x7b, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x7c, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x7d, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x7f, isPrefix: true };
    }
  }
  if (arguments.length === 2) {
    if (a0 === '0') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x46, isPrefix: true };
    }
    if (a0 === '1') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x4e, isPrefix: true };
    }
    if (a0 === '2') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x56, isPrefix: true };
    }
    if (a0 === '3') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x5e, isPrefix: true };
    }
    if (a0 === '4') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x66, isPrefix: true };
    }
    if (a0 === '5') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x6e, isPrefix: true };
    }
    if (a0 === '6') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x76, isPrefix: true };
    }
    if (a0 === '7') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x7e, isPrefix: true };
    }
  }
  throw new Error('BIT: Invalid argument combination provided');
}

export function RES(bitIndex: '0', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function RES(bitIndex: '1', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function RES(bitIndex: '2', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function RES(bitIndex: '3', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function RES(bitIndex: '4', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function RES(bitIndex: '5', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function RES(bitIndex: '6', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function RES(bitIndex: '7', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function RES(bitIndex: '0', r16ptrb: '(HL)'): OpDescription;
export function RES(bitIndex: '1', r16ptrb: '(HL)'): OpDescription;
export function RES(bitIndex: '2', r16ptrb: '(HL)'): OpDescription;
export function RES(bitIndex: '3', r16ptrb: '(HL)'): OpDescription;
export function RES(bitIndex: '4', r16ptrb: '(HL)'): OpDescription;
export function RES(bitIndex: '5', r16ptrb: '(HL)'): OpDescription;
export function RES(bitIndex: '6', r16ptrb: '(HL)'): OpDescription;
export function RES(bitIndex: '7', r16ptrb: '(HL)'): OpDescription;
export function RES(a0: any, a1: any): OpDescription {
  if (arguments.length === 2) {
    if (a0 === '0') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x80, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x81, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x82, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x83, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x84, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x85, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x87, isPrefix: true };
    }
    if (a0 === '1') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x88, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x89, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x8a, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x8b, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x8c, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x8d, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x8f, isPrefix: true };
    }
    if (a0 === '2') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x90, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x91, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x92, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x93, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x94, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x95, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x97, isPrefix: true };
    }
    if (a0 === '3') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0x98, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0x99, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0x9a, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0x9b, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0x9c, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0x9d, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0x9f, isPrefix: true };
    }
    if (a0 === '4') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0xa0, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0xa1, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0xa2, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0xa3, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0xa4, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0xa5, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0xa7, isPrefix: true };
    }
    if (a0 === '5') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0xa8, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0xa9, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0xaa, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0xab, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0xac, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0xad, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0xaf, isPrefix: true };
    }
    if (a0 === '6') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0xb0, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0xb1, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0xb2, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0xb3, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0xb4, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0xb5, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0xb7, isPrefix: true };
    }
    if (a0 === '7') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0xb8, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0xb9, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0xba, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0xbb, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0xbc, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0xbd, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0xbf, isPrefix: true };
    }
  }
  if (arguments.length === 2) {
    if (a0 === '0') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x86, isPrefix: true };
    }
    if (a0 === '1') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x8e, isPrefix: true };
    }
    if (a0 === '2') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x96, isPrefix: true };
    }
    if (a0 === '3') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0x9e, isPrefix: true };
    }
    if (a0 === '4') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0xa6, isPrefix: true };
    }
    if (a0 === '5') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0xae, isPrefix: true };
    }
    if (a0 === '6') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0xb6, isPrefix: true };
    }
    if (a0 === '7') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0xbe, isPrefix: true };
    }
  }
  throw new Error('RES: Invalid argument combination provided');
}

export function SET(bitIndex: '0', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function SET(bitIndex: '1', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function SET(bitIndex: '2', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function SET(bitIndex: '3', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function SET(bitIndex: '4', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function SET(bitIndex: '5', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function SET(bitIndex: '6', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function SET(bitIndex: '7', r8b: 'B' | 'C' | 'D' | 'E' | 'H' | 'L' | 'A'): OpDescription;
export function SET(bitIndex: '0', r16ptrb: '(HL)'): OpDescription;
export function SET(bitIndex: '1', r16ptrb: '(HL)'): OpDescription;
export function SET(bitIndex: '2', r16ptrb: '(HL)'): OpDescription;
export function SET(bitIndex: '3', r16ptrb: '(HL)'): OpDescription;
export function SET(bitIndex: '4', r16ptrb: '(HL)'): OpDescription;
export function SET(bitIndex: '5', r16ptrb: '(HL)'): OpDescription;
export function SET(bitIndex: '6', r16ptrb: '(HL)'): OpDescription;
export function SET(bitIndex: '7', r16ptrb: '(HL)'): OpDescription;
export function SET(a0: any, a1: any): OpDescription {
  if (arguments.length === 2) {
    if (a0 === '0') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0xc0, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0xc1, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0xc2, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0xc3, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0xc4, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0xc5, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0xc7, isPrefix: true };
    }
    if (a0 === '1') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0xc8, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0xc9, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0xca, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0xcb, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0xcc, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0xcd, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0xcf, isPrefix: true };
    }
    if (a0 === '2') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0xd0, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0xd1, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0xd2, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0xd3, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0xd4, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0xd5, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0xd7, isPrefix: true };
    }
    if (a0 === '3') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0xd8, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0xd9, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0xda, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0xdb, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0xdc, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0xdd, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0xdf, isPrefix: true };
    }
    if (a0 === '4') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0xe0, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0xe1, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0xe2, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0xe3, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0xe4, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0xe5, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0xe7, isPrefix: true };
    }
    if (a0 === '5') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0xe8, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0xe9, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0xea, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0xeb, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0xec, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0xed, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0xef, isPrefix: true };
    }
    if (a0 === '6') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0xf0, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0xf1, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0xf2, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0xf3, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0xf4, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0xf5, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0xf7, isPrefix: true };
    }
    if (a0 === '7') {
      if (a1 === 'B') return { type: 'opDescription', opcode: 0xf8, isPrefix: true };
      if (a1 === 'C') return { type: 'opDescription', opcode: 0xf9, isPrefix: true };
      if (a1 === 'D') return { type: 'opDescription', opcode: 0xfa, isPrefix: true };
      if (a1 === 'E') return { type: 'opDescription', opcode: 0xfb, isPrefix: true };
      if (a1 === 'H') return { type: 'opDescription', opcode: 0xfc, isPrefix: true };
      if (a1 === 'L') return { type: 'opDescription', opcode: 0xfd, isPrefix: true };
      if (a1 === 'A') return { type: 'opDescription', opcode: 0xff, isPrefix: true };
    }
  }
  if (arguments.length === 2) {
    if (a0 === '0') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0xc6, isPrefix: true };
    }
    if (a0 === '1') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0xce, isPrefix: true };
    }
    if (a0 === '2') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0xd6, isPrefix: true };
    }
    if (a0 === '3') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0xde, isPrefix: true };
    }
    if (a0 === '4') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0xe6, isPrefix: true };
    }
    if (a0 === '5') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0xee, isPrefix: true };
    }
    if (a0 === '6') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0xf6, isPrefix: true };
    }
    if (a0 === '7') {
      if (a1 === '(HL)') return { type: 'opDescription', opcode: 0xfe, isPrefix: true };
    }
  }
  throw new Error('SET: Invalid argument combination provided');
}